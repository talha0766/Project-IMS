# -*- coding: utf-8 -*-
"""Inventory Management System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oXLfqPbK-CQ7eIsWyegSw4z9benHmbNw
"""

import json
import os

class InventorySystem:
    class Item:
        def __init__(self, name, sku, quantity, price, supplier, threshold=0):
            self.name = name
            self.sku = sku
            self.quantity = quantity
            self.price = price
            self.supplier = supplier
            self.threshold = threshold

        def to_dict(self):
            return {
                "name": self.name,
                "sku": self.sku,
                "quantity": self.quantity,
                "price": self.price,
                "supplier": self.supplier,
                "threshold": self.threshold
            }

        @classmethod
        def from_dict(cls, data):
            return cls(data["name"], data["sku"], data["quantity"],
                       data["price"], data["supplier"], data["threshold"])

        def check_inventory(self):
            if self.quantity < self.threshold:
                self.alert()
            else:
                print(f"In Stock: {self.name} (SKU: {self.sku}) - Qty: {self.quantity}, Threshold: {self.threshold}")

        def alert(self):
            print(f"Alert: {self.name} (SKU: {self.sku}) - Qty: {self.quantity}, Threshold: {self.threshold}")

    def __init__(self, file_path="inventory.json", sales_file="sales.json", orders_file="orders.json"):
        self.items = {}
        self.sales_report = []
        self.orders = []
        self.file_path = file_path
        self.sales_file = sales_file
        self.orders_file = orders_file
        self.load_from_file()
        self.load_sales_report()
        self.load_orders()

    def add_item(self, name, sku, quantity, price, supplier, threshold):
        item = self.Item(name, sku, quantity, price, supplier, threshold)
        self.items[sku] = item
        print(f"Added item: {name} (SKU: {sku})")

    def update_item(self, sku, quantity=None, price=None, supplier=None, threshold=None):
        if sku in self.items:
            item = self.items[sku]
            if quantity is not None:
                item.quantity = quantity
            if price is not None:
                item.price = price
            if supplier is not None:
                item.supplier = supplier
            if threshold is not None:
                item.threshold = threshold
            print(f"Updated item: {sku}")
        else:
            print("Item not found.")

    def delete_item(self, sku):
        if sku in self.items:
            del self.items[sku]
            print(f"Deleted item with SKU: {sku}")
        else:
            print("Item not found.")

    def display_inventory(self):
        if not self.items:
            print("Inventory is empty.")
        else:
            print("\nInventory List:")
            for item in self.items.values():
                print(f'Name: {item.name}, SKU: {item.sku}, Quantity: {item.quantity}, Price: ${item.price:.2f}, '
                      f'Supplier: {item.supplier}, Threshold: {item.threshold}')

    def search_item(self, search_criteria):
        results = []
        for item in self.items.values():
            if (search_criteria.lower() in item.name.lower() or
                search_criteria.lower() in item.sku.lower() or
                search_criteria.lower() in item.supplier.lower()):
                results.append(item)
        return results

    def filter_items(self, min_price=None, max_price=None, min_quantity=None):
        results = []
        for item in self.items.values():
            if (min_price is None or item.price >= min_price) and \
               (max_price is None or item.price <= max_price) and \
               (min_quantity is None or item.quantity >= min_quantity):
                results.append(item)
        return results

    def sell_item(self, sku, quantity):
        if sku in self.items and self.items[sku].quantity >= quantity:
            item = self.items[sku]
            total_price = round(item.price * quantity, 2)
            self.sales_report.append({
                "name": item.name,
                "sku": sku,
                "quantity": quantity,
                "total_price": total_price
            })
            item.quantity -= quantity
            print(f'Sold {quantity} of {item.name} for ${total_price:.2f}')
            item.check_inventory()
        else:
            print('Insufficient stock or item not found.')

    def generate_sales_report(self):
        print("\nSales Report:")
        for record in self.sales_report:
            print(f'Item: {record["name"]}, SKU: {record["sku"]}, '
                  f'Quantity: {record["quantity"]}, Total: ${record["total_price"]:.2f}')
        if not self.sales_report:
            print("No sales recorded.")

    def record_order(self, sku, quantity):
        if sku in self.items and self.items[sku].quantity >= quantity:
            self.items[sku].quantity -= quantity
            self.orders.append({
                "sku": sku,
                "quantity": quantity
            })
            print(f'Order recorded: {quantity} units of {sku}')
            self.items[sku].check_inventory()
        else:
            print('Insufficient inventory for this order.')

    def save_to_file(self):
        with open(self.file_path, 'w') as f:
            json.dump({sku: item.to_dict() for sku, item in self.items.items()}, f, indent=2)
        print("Inventory saved.")

    def load_from_file(self):
        if os.path.exists(self.file_path):
            with open(self.file_path, 'r') as f:
                data = json.load(f)
                for sku, item_data in data.items():
                    self.items[sku] = self.Item.from_dict(item_data)
            print("Inventory loaded.")

    def save_sales_report(self):
        with open(self.sales_file, 'w') as f:
            json.dump(self.sales_report, f, indent=2)

    def load_sales_report(self):
        if os.path.exists(self.sales_file):
            with open(self.sales_file, 'r') as f:
                self.sales_report = json.load(f)

    def save_orders(self):
        with open(self.orders_file, 'w') as f:
            json.dump(self.orders, f, indent=2)

    def load_orders(self):
        if os.path.exists(self.orders_file):
            with open(self.orders_file, 'r') as f:
                self.orders = json.load(f)

    def exit_system(self):
        self.save_to_file()
        self.save_sales_report()
        self.save_orders()
        print("Goodbye!")


def main():
    system = InventorySystem()

    while True:
        print("\nInventory Menu:")
        print("1. Add Item")
        print("2. Sell Item")
        print("3. Record Order")
        print("4. Display Inventory")
        print("5. Search Item")
        print("6. Sales Report")
        print("7. Delete Item")  # Add Delete Item option
        print("8. Save and Exit")

        choice = input("Enter choice: ")

        if choice == '1':
            name = input("Name: ")
            sku = input("SKU: ")
            quantity = int(input("Quantity: "))
            price = float(input("Price: "))
            supplier = input("Supplier: ")
            threshold = int(input("Threshold: "))
            system.add_item(name, sku, quantity, price, supplier, threshold)
        elif choice == '2':
            sku = input("SKU to sell: ")
            qty = int(input("Quantity to sell: "))
            system.sell_item(sku, qty)
        elif choice == '3':
            sku = input("SKU to order: ")
            qty = int(input("Quantity to order: "))
            system.record_order(sku, qty)
        elif choice == '4':
            system.display_inventory()
        elif choice == '5':
            keyword = input("Search keyword: ")
            results = system.search_item(keyword)
            if results:
                for item in results:
                    print(f"{item.name} - SKU: {item.sku}, Qty: {item.quantity}")
            else:
                print("No matching items found.")
        elif choice == '6':
            system.generate_sales_report()
        elif choice == '7':  # Call delete_item
            sku = input("Enter SKU of the item to delete: ")
            system.delete_item(sku)
        elif choice == '8':
            system.exit_system()
            break
        else:
            print("Invalid choice. Please try again.")

main()
